var KnimeUIExtensionService=function(){"use strict";var e,i,t,n,s,a,o;!function(e){e.ERROR="error",e.WARN="warn"}(e||(e={}));class KnimeService{constructor(e=null,i=null,t=null){this.extensionConfig=e,this.callableService=i,this.callablePushNotification=t,this.notificationCallbacksMap=new Map}async callService(e){if(!this.extensionConfig){const e=this.createAlert({subtitle:"Missing extension config",message:"Cannot call service without extension config"});return this.sendError(e),Promise.resolve({})}if(!this.callableService){const e=this.createAlert({message:"Callable service is not available",subtitle:"Service not found"});return this.sendError(e),Promise.resolve({})}const i=await this.executeServiceCall(e),{error:t,result:n}=i||{};return t&&this.sendError(t),Promise.resolve({result:n})}executeServiceCall(e){return this.callableService(...e)}registerDataGetter(e){this.dataGetter=e}getData(){return Promise.resolve("function"==typeof this.dataGetter?this.dataGetter():null)}onServiceNotification(e){(this.notificationCallbacksMap.get(e.method)||[]).forEach((i=>{i(e)}))}addNotificationCallback(e,i){this.notificationCallbacksMap.set(e,[...this.notificationCallbacksMap.get(e)||[],i])}removeNotificationCallback(e,i){this.notificationCallbacksMap.set(e,(this.notificationCallbacksMap.get(e)||[]).filter((e=>e!==i)))}resetNotificationCallbacksByType(e){this.notificationCallbacksMap.set(e,[])}resetNotificationCallbacks(){this.notificationCallbacksMap.clear()}pushNotification(e){if(!this.extensionConfig){const e=this.createAlert({subtitle:"Missing extension config",message:"Cannot push notification without extension config"});return this.sendError(e),Promise.resolve({})}if(!this.callablePushNotification){const e=this.createAlert({subtitle:"Push notification failed",message:"Push notification is not available"});return this.sendError(e),Promise.resolve({})}return this.callablePushNotification(Object.assign({callerId:this.serviceId},e))}sendError(e){this.callablePushNotification?this.callablePushNotification({callerId:this.serviceId,alert:e,type:"alert"}):console.error(e)}sendWarning(e){this.callablePushNotification?this.callablePushNotification({callerId:this.serviceId,alert:e,type:"alert"}):console.warn(e)}createAlert(i){var t,n;const{type:s=e.ERROR,message:a,code:o,subtitle:r}=i;return{nodeId:(null===(t=this.extensionConfig)||void 0===t?void 0:t.nodeId)||"MISSING",nodeInfo:(null===(n=this.extensionConfig)||void 0===n?void 0:n.nodeInfo)||{},type:s,message:a,code:o,subtitle:r}}get serviceId(){const{nodeId:e,projectId:i,workflowId:t,extensionType:n}=this.extensionConfig||{};return`${e}.${i}.${t}.${n}`}}!function(e){e.CALL_NODE_DATA_SERVICE="NodeService.callNodeDataService",e.CALL_NODE_SELECTION_SERVICE="NodeService.updateDataPointSelection"}(i||(i={})),function(e){e.INITIAL_DATA="initial_data",e.DATA="data",e.APPLY_DATA="apply_data"}(t||(t={})),function(e){e.ADD="ADD",e.REMOVE="REMOVE",e.REPLACE="REPLACE"}(n||(n={})),function(e){e.DIALOG="dialog",e.VIEW="view"}(s||(s={})),function(e){e.DataEvent="DataEvent",e.SelectionEvent="SelectionEvent"}(a||(a={})),function(e){e.HTML="HTML",e.VUE_COMPONENT_LIB="VUE_COMPONENT_LIB"}(o||(o={}));var r=Object.freeze({__proto__:null,get NodeServices(){return i},get DataServiceTypes(){return t},get SelectionModes(){return n},get ExtensionTypes(){return s},get EventTypes(){return a},get ResourceTypes(){return o}});let l=0;const generateRequestId=()=>(l+=1,l),createJsonRpcRequest=(e,i=[])=>({jsonrpc:"2.0",method:e,params:i,id:generateRequestId()});const c="knimeUIExtension";var d=Object.freeze({__proto__:null,UI_EXT_POST_MESSAGE_PREFIX:c,UI_EXT_POST_MESSAGE_TIMEOUT:1e4});class IFrameKnimeService extends KnimeService{constructor(){super(),this.pendingServiceCalls=new Map,this.initializationPromise=new Promise((e=>{this.initializationPromiseResolve=e})),this.extensionConfig&&this.initializationPromiseResolve(),this.callableService=this.executeServiceCall,this.callablePushNotification=IFrameKnimeService.iframePushNotification,this.boundOnMessageFromParent=this.onMessageFromParent.bind(this),window.addEventListener("message",this.boundOnMessageFromParent),IFrameKnimeService.postMessage({messageType:"ready"})}async waitForInitialization(){await this.initializationPromise}onMessageFromParent(e){var i,t;const{data:n}=e;if(!(null===(i=n.type)||void 0===i?void 0:i.startsWith(c)))return;switch(null===(t=n.type)||void 0===t?void 0:t.replace("knimeUIExtension:","")){case"init":this.onInit(n);break;case"callServiceResponse":this.onCallServiceResponse(n);break;case"serviceNotification":this.onServiceNotification(n.payload)}}onInit(e){this.extensionConfig=e.payload,this.initializationPromiseResolve()}onCallServiceResponse(i){const{payload:{response:t,requestId:n}}=i,s=this.pendingServiceCalls.get(n);if(s)return s.resolve(t),void this.pendingServiceCalls.delete(n);const a=this.createAlert({code:"404",subtitle:"Request not found",type:e.ERROR,message:`Received callService response for non-existing pending request with id ${n}`});this.sendError(a)}executeServiceCall(i){let t;const n=generateRequestId(),s=new Promise(((i,s)=>{this.pendingServiceCalls.set(n,{resolve:i,reject:s}),t=setTimeout((()=>{const t=this.createAlert({code:"408",subtitle:"Request Timeout",type:e.ERROR,message:`Request with id ${n} aborted due to timeout.`});this.sendError(t),i(JSON.stringify({error:t}))}),1e4)}));return s.then((()=>{clearTimeout(t)})),IFrameKnimeService.postMessage({payload:{requestId:n,serviceParams:i},messageType:"callService"}),s}static postMessage(e){const{payload:i,messageType:t}=e;window.parent.postMessage({type:`knimeUIExtension:${t}`,payload:i},"*")}static iframePushNotification(e){return IFrameKnimeService.postMessage({payload:{notification:e},messageType:"notification"}),Promise.resolve()}destroy(){window.removeEventListener("message",this.boundOnMessageFromParent)}}const h=Object.assign({generateRequestId:generateRequestId,createJsonRpcRequest:createJsonRpcRequest},d);var v=Object.freeze({__proto__:null,KnimeTypes:r,KnimeService:KnimeService,JsonDataService:class JsonDataService{constructor(e){this.knimeService=e}callDataService(e,t=""){return this.knimeService.callService([i.CALL_NODE_DATA_SERVICE,e,t]).then((e=>"string"==typeof e&&""!==e?JSON.parse(e):e))}async initialData(){var e,i;let n;n=(null===(e=this.knimeService.extensionConfig)||void 0===e?void 0:e.initialData)?await Promise.resolve(null===(i=this.knimeService.extensionConfig)||void 0===i?void 0:i.initialData):await this.callDataService(t.INITIAL_DATA),"string"==typeof n&&(n=JSON.parse(n));const{result:s,warningMessages:a,userError:o,internalError:r}=n||{};return(o||r)&&this.handleError(o||r),a&&this.handleWarnings(a),Promise.resolve(s)}async data(e={}){const i=await this.callDataService(t.DATA,JSON.stringify(createJsonRpcRequest(e.method||"getData",e.options)));let n=(null==i?void 0:i.result)||{};"string"==typeof n&&(n=JSON.parse(n));const{error:s,warningMessages:a,result:o}=n;return s&&this.handleError(Object.assign(Object.assign({},s.data||{}),s)),a&&this.handleWarnings(a),Promise.resolve(o)}async applyData(){const e=await this.knimeService.getData();return this.callDataService(t.APPLY_DATA,e)}registerDataGetter(e){this.knimeService.registerDataGetter((()=>JSON.stringify(e())))}addOnDataChangeCallback(e){this.knimeService.addNotificationCallback(a.DataEvent,e)}publishData(e){this.knimeService.pushNotification({event:{data:e,method:a.DataEvent}})}handleError(i={}){const{details:t="",stackTrace:n="",typeName:s="",message:a="",code:o}=i;let r="",l="";if(a&&(a.length<=160?r=a:l=a),s&&(r?l=s:r=s),t&&(l=l?`${l}\n\n${t}`:t),Array.isArray(n)){const e=n.join("\n\t");l=l?`${l}\n\n${e}`:e}l=l.trim(),this.knimeService.sendError(this.knimeService.createAlert({subtitle:r||"Something went wrong",message:l||"No further information available. Please check the workflow configuration.",type:e.ERROR,code:o}))}handleWarnings(i){let t;const n=null==i?void 0:i.join("\n\n");(null==i?void 0:i.length)>1?t=`${null==i?void 0:i.length} messages`:(null==n?void 0:n.length)>160&&(t="Expand for details"),this.knimeService.sendWarning(this.knimeService.createAlert({type:e.WARN,message:n,subtitle:t}))}},IFrameKnimeService:IFrameKnimeService,IFrameKnimeServiceAdapter:class IFrameKnimeServiceAdapter extends KnimeService{constructor(e=null,i=null,t=null){super(e,i,t),this.boundOnMessageFromIFrame=this.onMessageFromIFrame.bind(this),window.addEventListener("message",this.boundOnMessageFromIFrame)}setIFrameWindow(e){this.iFrameWindow=e}updateEventListener(){window.removeEventListener("message",this.boundOnMessageFromIFrame),window.addEventListener("message",this.boundOnMessageFromIFrame)}checkMessageSource(e){return e.source!==this.iFrameWindow}async onMessageFromIFrame(e){var i;if(this.checkMessageSource(e))return;const{data:t}=e;switch(null===(i=t.type)||void 0===i?void 0:i.replace("knimeUIExtension:","")){case"ready":this.postMessage({payload:this.extensionConfig,messageType:"init"});break;case"callService":{const{payload:{requestId:e,serviceParams:i}}=t,n=await this.callService(i);this.postMessage({payload:{response:n,requestId:e},messageType:"callServiceResponse"})}break;case"notification":{const{payload:{notification:e}}=t;this.pushNotification(e)}}}onServiceNotification(e){const i="string"==typeof e?JSON.parse(e):e;this.postMessage({payload:i,messageType:"serviceNotification"})}destroy(){window.removeEventListener("message",this.boundOnMessageFromIFrame),this.iFrameWindow=null}postMessage(e){const{payload:i,messageType:t}=e;this.iFrameWindow.postMessage({type:`knimeUIExtension:${t}`,payload:i},"*")}},SelectionService:class SelectionService{constructor(e){this.knimeService=e,this.callbackMap=new Map}async initialSelection(){var e,i;let t;return(null===(e=this.knimeService.extensionConfig)||void 0===e?void 0:e.initialData)&&(t=await Promise.resolve(null===(i=this.knimeService.extensionConfig)||void 0===i?void 0:i.initialSelection)),"string"==typeof t&&(t=JSON.parse(t)),Promise.resolve(t)}updateSelection(e,t){return this.knimeService.callService([i.CALL_NODE_SELECTION_SERVICE,e,t]).then((e=>"string"==typeof e?JSON.parse(e):e))}add(e){return this.updateSelection(n.ADD,e)}remove(e){return this.updateSelection(n.REMOVE,e)}replace(e){return this.updateSelection(n.REPLACE,e)}addOnSelectionChangeCallback(e){const wrappedCallback=i=>{const{nodeId:t,selection:n,mode:s}=i.params[0]||{};this.knimeService.extensionConfig.nodeId===t&&e({selection:n,mode:s})};this.callbackMap.set(e,wrappedCallback),this.knimeService.addNotificationCallback(a.SelectionEvent,wrappedCallback)}removeOnSelectionChangeCallback(e){const i=this.callbackMap.get(e);this.knimeService.removeNotificationCallback(a.SelectionEvent,i)}onInit(e,i){this.onSelectionChangeCallback=e,i&&this.addOnSelectionChangeCallback(this.onSelectionChangeCallback)}onSelectionChange(e,i,t){t&&this[e.toLowerCase()](i)}onSettingsChange(e,i,t,n,s){const{publishSelection:a,subscribeToSelection:o}=s;if(!i&&a){const i=e();this.replace(i)}if(o!==n){this[o?"addOnSelectionChangeCallback":"removeOnSelectionChangeCallback"](this.onSelectionChangeCallback),o&&(this.replace([]),t())}}},DialogService:class DialogService{constructor(e){this.knimeService=e}async getFlowVariableSettings(){var e;return(({viewVariables:e={},modelVariables:i={}}={})=>{const traverseObject=(e,i,t={})=>e?Object.entries(e).reduce(((e,[t,n])=>n.leaf?(e[i?`${i}.${t}`:t]=n,e):traverseObject(n,`${i}${"value"===t?"":`.${t}`}`,e)),t):{};return Object.assign(Object.assign({},traverseObject(e,"view")),traverseObject(i,"model"))})(await Promise.resolve((null===(e=this.knimeService.extensionConfig)||void 0===e?void 0:e.flowVariableSettings)||{}))}},KnimeUtils:h});return Object.defineProperty(window,"KnimeUIExtensionService",v),v}();
