var KnimeUIExtensionService=function(){"use strict";class KnimeService{constructor(e=null,i=null,t=null){this.extensionConfig=e,this.callableService=i,this.callablePushNotification=t,this.notificationCallbacksMap=new Map}async callService(e){if(!this.extensionConfig)return Promise.reject(new Error("Cannot call service without extension config"));if(!this.callableService)return Promise.reject(new Error("Callable service is not available"));const i=await this.executeServiceCall(e),{error:t,result:n}=i||{};return t?(this.pushError(t.message,t.code),Promise.resolve({error:t})):Promise.resolve(n)}executeServiceCall(e){return this.callableService(...e)}registerDataGetter(e){this.dataGetter=e}getData(){return Promise.resolve("function"==typeof this.dataGetter?this.dataGetter():null)}onServiceNotification(e){(this.notificationCallbacksMap.get(e.method)||[]).forEach((i=>{i(e)}))}addNotificationCallback(e,i){this.notificationCallbacksMap.set(e,[...this.notificationCallbacksMap.get(e)||[],i])}removeNotificationCallback(e,i){this.notificationCallbacksMap.set(e,(this.notificationCallbacksMap.get(e)||[]).filter((e=>e!==i)))}resetNotificationCallbacksByType(e){this.notificationCallbacksMap.set(e,[])}resetNotificationCallbacks(){this.notificationCallbacksMap.clear()}pushNotification(e){return this.extensionConfig?this.callablePushNotification?this.callablePushNotification(Object.assign({callerId:this.serviceId},e)):Promise.reject(new Error("Push notification is not available")):Promise.reject(new Error("Cannot push notification without extension config"))}pushError(e,i=""){this.pushNotification({message:e,code:i,type:"ERROR"})}get serviceId(){const{nodeId:e,projectId:i,workflowId:t,extensionType:n}=this.extensionConfig||{};return`${e}.${i}.${t}.${n}`}}var e,i,t,n,a,s;!function(e){e.CALL_NODE_DATA_SERVICE="NodeService.callNodeDataService",e.CALL_NODE_SELECTION_SERVICE="NodeService.updateDataPointSelection"}(e||(e={})),function(e){e.INITIAL_DATA="initial_data",e.DATA="data",e.APPLY_DATA="apply_data"}(i||(i={})),function(e){e.ADD="ADD",e.REMOVE="REMOVE",e.REPLACE="REPLACE"}(t||(t={})),function(e){e.DIALOG="dialog",e.VIEW="view"}(n||(n={})),function(e){e.DataEvent="DataEvent",e.SelectionEvent="SelectionEvent"}(a||(a={})),function(e){e.HTML="HTML",e.VUE_COMPONENT_LIB="VUE_COMPONENT_LIB"}(s||(s={}));var r=Object.freeze({__proto__:null,get NodeServices(){return e},get DataServiceTypes(){return i},get SelectionModes(){return t},get ExtensionTypes(){return n},get EventTypes(){return a},get ResourceTypes(){return s}});let o=0;const generateRequestId=()=>(o+=1,o),createJsonRpcRequest=(e,i=[])=>({jsonrpc:"2.0",method:e,params:i,id:generateRequestId()});const c="knimeUIExtension";var l=Object.freeze({__proto__:null,UI_EXT_POST_MESSAGE_PREFIX:c,UI_EXT_POST_MESSAGE_TIMEOUT:1e4});const v=Object.assign({generateRequestId:generateRequestId,createJsonRpcRequest:createJsonRpcRequest},l);var d=Object.freeze({__proto__:null,KnimeTypes:r,KnimeService:KnimeService,JsonDataService:class JsonDataService{constructor(e){this.knimeService=e}callDataService(i,t=""){return this.knimeService.callService([e.CALL_NODE_DATA_SERVICE,i,t]).then((e=>"string"==typeof e&&""!==e?JSON.parse(e):e))}initialData(){var e;const t=(null===(e=this.knimeService.extensionConfig)||void 0===e?void 0:e.initialData)||null;return t?Promise.resolve(t).then((e=>"string"==typeof e?JSON.parse(e):e)):this.callDataService(i.INITIAL_DATA)}data(e={}){return this.callDataService(i.DATA,JSON.stringify(createJsonRpcRequest(e.method||"getData",e.options)))}async applyData(){const e=await this.knimeService.getData();return this.callDataService(i.APPLY_DATA,e)}registerDataGetter(e){this.knimeService.registerDataGetter((()=>JSON.stringify(e())))}addOnDataChangeCallback(e){this.knimeService.addNotificationCallback(a.DataEvent,e)}publishData(e){this.knimeService.pushNotification({method:a.DataEvent,event:{data:e}})}},IFrameKnimeService:class IFrameKnimeService extends KnimeService{constructor(){super(),this.pendingServiceCalls=new Map,this.initializationPromise=new Promise((e=>{this.initializationPromiseResolve=e})),this.extensionConfig&&this.initializationPromiseResolve(),this.callableService=this.executeServiceCall,this.boundOnMessageFromParent=this.onMessageFromParent.bind(this),window.addEventListener("message",this.boundOnMessageFromParent),window.parent.postMessage({type:"knimeUIExtension:ready"},"*")}async waitForInitialization(){await this.initializationPromise}onMessageFromParent(e){var i;const{data:t}=e;if(null===(i=t.type)||void 0===i?void 0:i.startsWith(c))switch(t.type){case"knimeUIExtension:init":this.onInit(t);break;case"knimeUIExtension:callServiceResponse":this.onCallServiceResponse(t);break;case"knimeUIExtension:serviceNotification":this.onServiceNotification(t.payload.data||t.payload)}}onInit(e){this.extensionConfig=e.payload,this.initializationPromiseResolve()}onCallServiceResponse(e){const{payload:{response:i,requestId:t}}=e,n=this.pendingServiceCalls.get(t);if(!n){const e=`Received callService response for non-existing pending request with id ${t}`;throw this.pushError(e,"req-not-found"),new Error(e)}n.resolve(JSON.parse(i)),this.pendingServiceCalls.delete(t)}executeServiceCall(e){let i;const t=generateRequestId(),n=new Promise(((e,n)=>{this.pendingServiceCalls.set(t,{resolve:e,reject:n}),i=setTimeout((()=>{const i=`Request with id ${t} aborted due to timeout.`;this.pushError(i,"req-not-found"),e(JSON.stringify({error:{message:i,code:"req-timeout"},result:null}))}),1e4)}));return n.then((()=>{clearTimeout(i)})),window.parent.postMessage({type:"knimeUIExtension:callService",payload:{requestId:t,serviceParams:e}},"*"),n}destroy(){window.removeEventListener("message",this.boundOnMessageFromParent)}},IFrameKnimeServiceAdapter:class IFrameKnimeServiceAdapter extends KnimeService{constructor(e=null,i=null){super(e,i),this.boundOnMessageFromIFrame=this.onMessageFromIFrame.bind(this),window.addEventListener("message",this.boundOnMessageFromIFrame)}setIFrameWindow(e){this.iFrameWindow=e}updateEventListener(){window.removeEventListener("message",this.boundOnMessageFromIFrame),window.addEventListener("message",this.boundOnMessageFromIFrame)}checkMessageSource(e){return e.source!==this.iFrameWindow}async onMessageFromIFrame(e){if(this.checkMessageSource(e))return;const{data:i}=e;switch(i.type){case"knimeUIExtension:ready":this.iFrameWindow.postMessage({type:"knimeUIExtension:init",payload:this.extensionConfig},"*");break;case"knimeUIExtension:callService":{const{payload:{requestId:e,serviceParams:t}}=i,n=await this.callService(t);this.iFrameWindow.postMessage({type:"knimeUIExtension:callServiceResponse",payload:{response:n,requestId:e}},"*")}}}onServiceNotification(e){this.iFrameWindow.postMessage({type:"knimeUIExtension:serviceNotification",payload:"string"==typeof e?JSON.parse(e):e},"*")}destroy(){window.removeEventListener("message",this.boundOnMessageFromIFrame),this.iFrameWindow=null}},SelectionService:class SelectionService{constructor(e){this.knimeService=e}callSelectionService(i,t){return this.knimeService.callService([e.CALL_NODE_SELECTION_SERVICE,i,t]).then((e=>"string"==typeof e?JSON.parse(e):e))}add(e){return this.callSelectionService(t.ADD,e)}remove(e){return this.callSelectionService(t.REMOVE,e)}replace(e){return this.callSelectionService(t.REPLACE,e)}addOnSelectionChangeCallback(e){this.knimeService.addNotificationCallback(a.SelectionEvent,e)}removeOnSelectionChangeCallback(e){this.knimeService.removeNotificationCallback(a.SelectionEvent,e)}},KnimeUtils:v});return Object.defineProperty(window,"KnimeUIExtensionService",d),d}();
